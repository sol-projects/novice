package interpreter.evaluator

import interpreter.tokenizer.TokenInfo
import kotlin.system.exitProcess

sealed class EvaluatorError{
    data class Generic(val tokenInfo: TokenInfo, val string: String) : EvaluatorError()
    data class InvalidFor(val tokenInfo: TokenInfo) : EvaluatorError()
    data class AssignmentTypeError(val tokenInfo: TokenInfo, val string: String) : EvaluatorError()
    data class FunctionNotFound(val tokenInfo: TokenInfo, val string: String) : EvaluatorError()
    data class ArrayTypeError(val tokenInfo: TokenInfo, val string: String) : EvaluatorError()
    data class AssignmentConstError(val tokenInfo: TokenInfo, val string: String) : EvaluatorError()
    data class PopOnEmptyArray(val tokenInfo: TokenInfo, val string: String) : EvaluatorError()
    data class ExpectedStartingParentheses(val tokenInfo: TokenInfo) : EvaluatorError()
    data class ShadowedVariable(val tokenInfo: TokenInfo) : EvaluatorError()
    data class UndefinedVariable(val tokenInfo: TokenInfo) : EvaluatorError()
    data class InvalidParameterSyntax(val tokenInfo: TokenInfo) : EvaluatorError()
    data class InvalidGeojson(val tokenInfo: TokenInfo) : EvaluatorError()

}

fun evaluatorPrintError(evaluatorError: EvaluatorError) {
    when (evaluatorError) {
        is EvaluatorError.Generic -> println("Evaluation error: unexpected token '${evaluatorError.tokenInfo.lexeme}' of type ${evaluatorError.tokenInfo.type} after ${evaluatorError.string} on line ${evaluatorError.tokenInfo.startPosition.row}")
        is EvaluatorError.InvalidFor -> println("Evaluation error: invalid for loop structure, unexpected token '${evaluatorError.tokenInfo.lexeme}' of type ${evaluatorError.tokenInfo.type} on line ${evaluatorError.tokenInfo.startPosition.row}")
        is EvaluatorError.AssignmentTypeError -> println("Evaluation error: invalid assignment; found '${evaluatorError.tokenInfo.lexeme}' of type ${evaluatorError.tokenInfo.type} after ${evaluatorError.string} on line ${evaluatorError.tokenInfo.startPosition.row}. Cannot assign type to variable")
        is EvaluatorError.ArrayTypeError -> println("Evaluation error: invalid type; found '${evaluatorError.tokenInfo.lexeme}' of type ${evaluatorError.tokenInfo.type} after ${evaluatorError.string} on line ${evaluatorError.tokenInfo.startPosition.row}. Cannot assign a construct of this type to the array")
        is EvaluatorError.FunctionNotFound -> println("Evaluation error: invalid function name; found '${evaluatorError.tokenInfo.lexeme}' of type ${evaluatorError.tokenInfo.type} after ${evaluatorError.string} on line ${evaluatorError.tokenInfo.startPosition.row}. This function does not exist, did you declare it before using it?")
        is EvaluatorError.AssignmentConstError -> println("Evaluation error: invalid assignment; found '${evaluatorError.tokenInfo.lexeme}' of type ${evaluatorError.tokenInfo.type} after ${evaluatorError.string} on line ${evaluatorError.tokenInfo.startPosition.row}. Cannot assign to a variable declared with const")
        is EvaluatorError.PopOnEmptyArray -> println("Evaluation error: pop on empty array after ${evaluatorError.string} on line ${evaluatorError.tokenInfo.startPosition.row}")
        is EvaluatorError.ExpectedStartingParentheses -> println("Evaluation error: expected (, found '${evaluatorError.tokenInfo.lexeme}' on line ${evaluatorError.tokenInfo.startPosition.row}")
        is EvaluatorError.UndefinedVariable -> println("Evaluation error: variable '${evaluatorError.tokenInfo.lexeme}' on line ${evaluatorError.tokenInfo.startPosition.row} undefined")
        is EvaluatorError.ShadowedVariable -> println("Evaluation error: variable '${evaluatorError.tokenInfo.lexeme}' on line ${evaluatorError.tokenInfo.startPosition.row} is shadowed by a previous declaration of a variable with the same name.")
        is EvaluatorError.InvalidParameterSyntax -> println("Evaluation error: invalid parameter syntax, found '${evaluatorError.tokenInfo.lexeme}' on line ${evaluatorError.tokenInfo.startPosition.row}")
        is EvaluatorError.InvalidGeojson -> println("Evaluation error: invalid geojson generated by the interpreter")
    }

    exitProcess(1)
}