/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package interpreter
import interpreter.evaluator.evaluate
import interpreter.parser.parse
import kotlin.test.Test
import kotlin.test.assertEquals
import interpreter.tokenizer.*

import java.io.ByteArrayOutputStream
import java.io.PrintStream

fun testEvaluator(tokens: List<TokenInfo>, expectedOutput: String) {
    val outputStream = ByteArrayOutputStream()
    val printStream = PrintStream(outputStream)
    val originalOut = System.out
    System.setOut(printStream)

    evaluate(tokens)

    System.setOut(originalOut)

    val printedOutput = outputStream.toString().trim()
    assertEquals(expectedOutput, printedOutput)
}

class AppTest {
    @Test fun tokenizer() {
        tokenize("1 + 2")?.get(1)?.let {
            assertEquals(it.lexeme, "+")
            assertEquals(it.type, TokenType.Addition)
            assertEquals(it.startPosition.row, 1)
        }

        tokenize("println(\"hey\")")?.get(3)?.let {
            assertEquals(it.lexeme, ")")
            assertEquals(it.type, TokenType.RightParenthesis)
            assertEquals(it.startPosition.row, 1)
        }

        tokenize("1 + 2")?.get(2)?.let {
            assertEquals(it.lexeme, "2")
            assertEquals(it.type, TokenType.Int)
            assertEquals(it.startPosition.row, 1)
        }

        tokenize("\n(1 - 2) + 2")?.get(4)?.let {
            assertEquals(it.lexeme, ")")
            assertEquals(it.type, TokenType.RightParenthesis)
            assertEquals(it.startPosition.row, 2)
        }

        tokenize("\nlet i =10")?.let {
            assertEquals(it[0].type, TokenType.VarDeclaration)
            assertEquals(it[0].lexeme, "let")
            assertEquals(it[1].type, TokenType.Identifier)
            assertEquals(it[1].lexeme, "i")
            assertEquals(it[2].type, TokenType.Equals)
            assertEquals(it[2].lexeme, "=")
            assertEquals(it[3].type, TokenType.Int)
            assertEquals(it[3].lexeme, "10")
        }

        tokenize("\nlet i: i32 = 10")?.let {
            assertEquals(it[3].type, TokenType.I32)
            assertEquals(it[3].lexeme, "i32")
        }

        tokenize("\nlet i: char = 'a'")?.let {
            assertEquals(it[3].type, TokenType.CharType)
            assertEquals(it[3].lexeme, "char")
            assertEquals(it[5].type, TokenType.Char)
            assertEquals(it[5].lexeme, "'a'")
        }

        tokenize("\nlet i:string = \"abc\"")?.let {
            assertEquals(it[3].type, TokenType.StringType)
            assertEquals(it[3].lexeme, "string")
            assertEquals(it[5].type, TokenType.String)
            assertEquals(it[5].lexeme, "\"abc\"")
        }

        tokenize("\ni== 10.53 12")?.let {
            assertEquals(it[2].type, TokenType.Float)
            assertEquals(it[2].lexeme, "10.53")
            assertEquals(it[3].type, TokenType.Int)
            assertEquals(it[3].lexeme, "12")
        }

        tokenize("\ni== #1F")?.let {
            assertEquals(it[2].type, TokenType.Hex)
            assertEquals(it[2].lexeme, "#1F")
        }

        tokenize("fn main()\n{\n}")?.let {
            assertEquals(it[0].type, TokenType.Function)
            assertEquals(it[0].lexeme, "fn")
            assertEquals(it[1].type, TokenType.Identifier)
            assertEquals(it[1].lexeme, "main")
            assertEquals(it[2].type, TokenType.LeftParenthesis)
            assertEquals(it[2].lexeme, "(")
            assertEquals(it[3].type, TokenType.RightParenthesis)
            assertEquals(it[3].lexeme, ")")
        }

        tokenize("fn func(str: string) {\n}")?.let {
            assertEquals(it[0].type, TokenType.Function)
            assertEquals(it[0].lexeme, "fn")
            assertEquals(it[1].type, TokenType.Identifier)
            assertEquals(it[1].lexeme, "func")
            assertEquals(it[2].type, TokenType.LeftParenthesis)
            assertEquals(it[2].lexeme, "(")
            assertEquals(it[3].type, TokenType.Identifier)
            assertEquals(it[3].lexeme, "str")
            assertEquals(it[4].type, TokenType.Colon)
            assertEquals(it[4].lexeme, ":")
            assertEquals(it[5].type, TokenType.StringType)
            assertEquals(it[5].lexeme, "string")
            assertEquals(it[6].type, TokenType.RightParenthesis)
            assertEquals(it[6].lexeme, ")")
        }
    }

    @Test fun parser() {
        tokenize("1 + 2)")?.let { assert(!parse(it)) }
        tokenize("1 + 2")?.let { assert(parse(it)) }
        tokenize("(1 + 2)")?.let { assert(parse(it)) }
        tokenize("(1 + 2 - (3 * (10)))")?.let { assert(parse(it)) }
        tokenize("""
            fn main() {
            
            }
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            fn main() {
            
            
        """.trimIndent())?.let { assert(!parse(it)) }

        tokenize("""
            fn func(str: string) {
            
            }
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            let i = 10
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            let i: i32 = 10
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            let i: ii32 = 10
        """.trimIndent())?.let { assert(!parse(it)) }

        tokenize("""
            let i: string = 10
            let i: f32 = (1 + i)
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            if(1 + 2) {
                let i = 1 + 2
            }
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            if 1 + 2 {
                let i = 1 + 2
            }
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            if 1 * 3 + (2 - 1) {

            }
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            for a in arr {
                a = 10
            }
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            for a .. arr {
                a = 1032
            }
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            for a .. 10 {
                a = 10
            }
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            for 1 in 2 {
                a = 10
            }
        """.trimIndent())?.let { assert(!parse(it)) }

        tokenize("""
            if 1 * 3 + (2 - 1)
        """.trimIndent())?.let { assert(!parse(it)) }

        tokenize("""
            if 1 * 3 + (2 - 1) {
                i = i + 1
            } else {
                let i = 1 - 12
            }
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            if 1 * 3 + (2 - 1) {
                i = i + 1
            } elif 1 - 2 {
                let i = 1 - 12
            }
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            if 1 * 3 + (2 - 1) {
                i = i + 1
            } elif 1 - 2 {
                let i = 1 - 12
            } elif 1 - 2 {
                let i = 1 - 12
            } else {
                let a = 1 > 2
            }
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            loop {

            }
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            loop
        """.trimIndent())?.let { assert(!parse(it)) }

        tokenize("""
            fn calculate(n1: i32, n2: f32) {
                for el in arr {
                    if el < 5 {
                        return 0
                    }
                }
            }
            
            fn main() {
                calculate(1, 2.0)
            }
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            println("\${'$'}{i}")
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            [1, 2, 3]
        """.trimIndent())?.let { assert(parse(it)) }
    }

    @Test fun evaluator() {
        tokenize("""
            let i: i32 = 20 - 10
            println("${'$'}{i} is a number that equals... ${'$'}{i}")
        """.trimIndent())?.let {
            assert(parse(it))
            testEvaluator(it, "10 is a number that equals... 10")
        }

        tokenize("""
            let i: i32 = 20*3 + (11 + 5)/3 - 10
            println("${'$'}{i} is a number that equals... ${'$'}{i}")
        """.trimIndent())?.let {
            assert(parse(it))
            testEvaluator(it, "55 is a number that equals... 55")
        }

        tokenize("""
            let str: string = "string number 1"
            println("${'$'}{str}")
        """.trimIndent())?.let {
            assert(parse(it))
            testEvaluator(it, "string number 1")
        }

        tokenize("""
            let str = "string number 1"
            println("${'$'}{str}")
        """.trimIndent())?.let {
            assert(parse(it))
            testEvaluator(it, "string number 1")
        }

        tokenize("""
            let float = 1.0
            let int = 1
            let calcfloat = 21*2 + 15.4 - 11/2 + 0.2
            let calcint = 21*2 + 15
            println("${'$'}{int} ${'$'}{float} ${'$'}{calcfloat} ${'$'}{calcint}")
        """.trimIndent())?.let {
            assert(parse(it))
            testEvaluator(it, "1 1.0 52.1 57")
        }

        tokenize("""
            let float = 1.5
            let int = 1
            if float > int {
                println("${'$'}{float} is bigger than ${'$'}{int}")
            } elif float < int {
                println("${'$'}{float} is smaller than ${'$'}{int}")
            }
            
        """.trimIndent())?.let {
            assert(parse(it))
            testEvaluator(it, "1.5 is bigger than 1")
        }

        tokenize("""
            let n = 2*5
            let n2 = 1*10
            let res = if n2 == n { 5 } elif n > 5 { 3 }
            if res == 5 {
                println("${'$'}{res}")
            }
            
        """.trimIndent())?.let {
            assert(parse(it))
            testEvaluator(it, "5")
        }

        tokenize("""
            let res = 5
            if res == 5 {
                if 1 > 2 {
                    res = 11
                } elif 3 < 2 {
                    res = 10
                } elif 2 > 1 {
                    if res == 5 {
                        res = 9
                    } else {
                        res = 20
                    }
                } elif 2 > 1 {
                    res = 8
                } else {
                    res = 7
                }
            }
            println("${'$'}{res}")
        """.trimIndent())?.let {
            assert(parse(it))
            testEvaluator(it, "9")
        }

        tokenize("""
            let array = [5, 1, 2]
            println("${'$'}{array}")
        """.trimIndent())?.let {
            assert(parse(it))
            testEvaluator(it, "5, 1, 2")
        }

        tokenize("""
            let array = []
            array.push(5)
            array.push(1)
            array.push(2)
            println("${'$'}{array}")
        """.trimIndent())?.let {
            assert(parse(it))
            testEvaluator(it, "5, 1, 2")
        }

        tokenize("""
            let array = [5, 1, 2]
            for m in array {
                println("${'$'}{m}")
            }
        """.trimIndent())?.let {
            assert(parse(it))
            testEvaluator(it, "5\n1\n2")
        }

        tokenize("""
            let array = [5, 1, 2]
            let sum = 0
            for m in array {
                sum = sum + m
            }
            println("${'$'}{sum}")
        """.trimIndent())?.let {
            assert(parse(it))
            testEvaluator(it, "8")
        }

        tokenize("""
            let sum = 0
            for m in [5, 1, 2] {
                sum = sum + m
            }
            println("${'$'}{sum}")
        """.trimIndent())?.let {
            assert(parse(it))
            testEvaluator(it, "8")
        }

        tokenize("""
            let array = [5, 1, 2]
            array.pop()
            array.pop()
            array.push(10 + 12)
            println("${'$'}{array}")
        """.trimIndent())?.let {
            assert(parse(it))
            testEvaluator(it, "5, 22")
        }

        tokenize("""
            group {
                building "bld" [1, 2] [3, 4]
                point "pt" [1, 2]
            }
        """.trimIndent())?.let {
            assert(parse(it))
            testEvaluator(it, "")
        }

        tokenize("""
            fn func(str: string, i: i32) {
                println("${'$'}{str} ${'$'}{i}")
            }
            
            func("string", 1)
        """.trimIndent())?.let {
            assert(parse(it))
            testEvaluator(it, "string 1")
        }

        tokenize("""
            fn func(n: i32, n2: i32): i32 {
                n + n2
            }
            
            let sum = func(1, 3)
            println("${'$'}{sum}")
        """.trimIndent())?.let {
            assert(parse(it))
            testEvaluator(it, "4")
        }

        tokenize("""
            let sum = fn func(n: i32, n2: i32) {
                n + n2
            }
            
            let res = sum(1, 2)
            println("${'$'}{res}")
        """.trimIndent())?.let {
            assert(parse(it))
            testEvaluator(it, "3")
        }

        tokenize("""
            fn func(n: i32, n2: i32) {
                n + n2
            }
            
            let sum = func
            let res = sum(1, 2)
            println("${'$'}{res}")
        """.trimIndent())?.let {
            assert(parse(it))
            testEvaluator(it, "3")
        }

        tokenize("""
            fn func(n: i32, n2: i32) {
                n + n2
            }
            
            let sum = func
            let res = sum(1, 2)
            res = sum(2, 4)
            println("${'$'}{res}")
        """.trimIndent())?.let {
            assert(parse(it))
            testEvaluator(it, "6")
        }

        tokenize("""
            let int: i32 = 0
            let float: f32 = 0.0
            let str: string = ""
            let arr = [1, 234]
            println("${'$'}{int} ${'$'}{float} ${'$'}{str} ${'$'}{arr}")
        """.trimIndent())?.let {
            assert(parse(it))
            testEvaluator(it, "0 0.0  1, 234")
        }

        tokenize("""
            let int: i32 = let a = let b = 20
            println("${'$'}{int} ${'$'}{a} ${'$'}{b}")
        """.trimIndent())?.let {
            assert(parse(it))
            testEvaluator(it, "20 20 20")
        }
    }
}
