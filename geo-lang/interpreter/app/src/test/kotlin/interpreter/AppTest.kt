/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package interpreter
import interpreter.parser.parse
import kotlin.test.Test
import kotlin.test.assertEquals
import interpreter.tokenizer.*
import java.io.File

class AppTest {
    @Test fun tokenizer() {
        tokenize("1 + 2")?.get(1)?.let {
            assertEquals(it.lexeme, "+")
            assertEquals(it.type, TokenType.Addition)
            assertEquals(it.startPosition.row, 1)
        }

        tokenize("1 + 2")?.get(2)?.let {
            assertEquals(it.lexeme, "2")
            assertEquals(it.type, TokenType.Int)
            assertEquals(it.startPosition.row, 1)
        }

        tokenize("\n(1 - 2) + 2")?.get(4)?.let {
            assertEquals(it.lexeme, ")")
            assertEquals(it.type, TokenType.RightParenthesis)
            assertEquals(it.startPosition.row, 2)
        }

        tokenize("\nlet i =10")?.let {
            assertEquals(it[0].type, TokenType.VarDeclaration)
            assertEquals(it[0].lexeme, "let")
            assertEquals(it[1].type, TokenType.Identifier)
            assertEquals(it[1].lexeme, "i")
            assertEquals(it[2].type, TokenType.Equals)
            assertEquals(it[2].lexeme, "=")
            assertEquals(it[3].type, TokenType.Int)
            assertEquals(it[3].lexeme, "10")
        }

        tokenize("\nlet i: i32 = 10")?.let {
            assertEquals(it[3].type, TokenType.I32)
            assertEquals(it[3].lexeme, "i32")
        }

        tokenize("\nlet i: char = 'a'")?.let {
            assertEquals(it[3].type, TokenType.CharType)
            assertEquals(it[3].lexeme, "char")
            assertEquals(it[5].type, TokenType.Char)
            assertEquals(it[5].lexeme, "'a'")
        }

        tokenize("\nlet i:string = \"abc\"")?.let {
            assertEquals(it[3].type, TokenType.StringType)
            assertEquals(it[3].lexeme, "string")
            assertEquals(it[5].type, TokenType.String)
            assertEquals(it[5].lexeme, "\"abc\"")
        }

        tokenize("\ni== 10.53 12")?.let {
            assertEquals(it[2].type, TokenType.Float)
            assertEquals(it[2].lexeme, "10.53")
            assertEquals(it[3].type, TokenType.Int)
            assertEquals(it[3].lexeme, "12")
        }

        tokenize("\ni== #1F")?.let {
            assertEquals(it[2].type, TokenType.Hex)
            assertEquals(it[2].lexeme, "#1F")
        }

        tokenize("fn main()\n{\n}")?.let {
            assertEquals(it[0].type, TokenType.Function)
            assertEquals(it[0].lexeme, "fn")
            assertEquals(it[1].type, TokenType.Identifier)
            assertEquals(it[1].lexeme, "main")
            assertEquals(it[2].type, TokenType.LeftParenthesis)
            assertEquals(it[2].lexeme, "(")
            assertEquals(it[3].type, TokenType.RightParenthesis)
            assertEquals(it[3].lexeme, ")")
        }

        tokenize("fn func(str: string) {\n}")?.let {
            assertEquals(it[0].type, TokenType.Function)
            assertEquals(it[0].lexeme, "fn")
            assertEquals(it[1].type, TokenType.Identifier)
            assertEquals(it[1].lexeme, "func")
            assertEquals(it[2].type, TokenType.LeftParenthesis)
            assertEquals(it[2].lexeme, "(")
            assertEquals(it[3].type, TokenType.Identifier)
            assertEquals(it[3].lexeme, "str")
            assertEquals(it[4].type, TokenType.Colon)
            assertEquals(it[4].lexeme, ":")
            assertEquals(it[5].type, TokenType.StringType)
            assertEquals(it[5].lexeme, "string")
            assertEquals(it[6].type, TokenType.RightParenthesis)
            assertEquals(it[6].lexeme, ")")
        }
    }

    @Test fun parser() {
        tokenize("1 + 2);")?.let { assertEquals(parse(it), false) }
        tokenize("1 + 2;")?.let { assertEquals(parse(it), true) }
        tokenize("(1 + 2);")?.let { assertEquals(parse(it), true) }
        tokenize("(1 + 2 - (3 * (10)));")?.let { assertEquals(parse(it), true) }
        tokenize("""
            fn main() {
            
            }
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            fn main() {
            
            
        """.trimIndent())?.let { assert(!parse(it)) }

        tokenize("""
            fn func(str: string) {
            
            }
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            let i = 10;
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            let i: i32 = 10;
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            let i: ii32 = 10;
        """.trimIndent())?.let { assert(!parse(it)) }

        tokenize("""
            let i: string = 10;
            let i: f32 = (1 + i);
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            if(1 + 2) {
                let i = 1 + 2;            
            }
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            if 1 + 2 {
                let i = 1 + 2;            
            }
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            if 1 * 3 + (2 - 1) {

            }
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            for a in arr {
                a = 10
            }
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            for a .. arr {
                a = 1032
            }
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            for a .. 10 {
                a = 10
            }
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            for 1 in 2 {
                a = 10
            }
        """.trimIndent())?.let { assert(!parse(it)) }

        tokenize("""
            if 1 * 3 + (2 - 1)
        """.trimIndent())?.let { assert(!parse(it)) }

        tokenize("""
            if 1 * 3 + (2 - 1) {
                i = i + 1
            } else {
                let i = 1 - 12
            }
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            if 1 * 3 + (2 - 1) {
                i = i + 1
            } elseif 1 - 2 {
                let i = 1 - 12
            }
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            if 1 * 3 + (2 - 1) {
                i = i + 1
            } elseif 1 - 2 {
                let i = 1 - 12
            } elseif 1 - 2 {
                let i = 1 - 12
            } else {
                let a = 1 > 2
            }
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            loop {

            }
        """.trimIndent())?.let { assert(parse(it)) }

        tokenize("""
            loop
        """.trimIndent())?.let { assert(!parse(it)) }

        tokenize("""
            fn calculate(n1: i32, n2: f32) {
                for el in arr {
                    if el < 5 {
                        return 0
                    }
                }
            }
            
            fn main() {
                calculate(1, 2.0)
            }
        """.trimIndent())?.let { assert(parse(it)) }
    }
}
