INT   ::= DIGIT INT | DIGIT
DIGIT ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

EXPRESSION       ::= EXPRESSION + EXPRESSION_MULTIPLICATION | EXPRESSION - EXPRESSION_MULTIPLICATION | EXPRESSION_TERM
EXPRESSION_TERM  ::= EXPRESSION_TERM * POWER | EXPRESSION_TERM / POWER | POWER
EXPRESSION_POWER ::= FACTOR ^ POWER | FACTOR
FACTOR           ::= ( EXPRESSION ) | ASSIGNMENT
EXPRESSION_VALID ::= IF | INT | FLOAT | ASSIGNMENT

FUNCTION      ::= FUNCTION_HEAD FUNCTION_BODY
FUNCTION_HEAD ::= fn IDENTIFIER ( PARAMETERS ) : TYPE | fn IDENTIFIER ( PARAMETERS )
PARAMETERS    ::= PARAMETER , PARAMETERS | PARAMETER | ε
PARAMETER     ::= IDENTIFIER : TYPE
FUNCTION_BODY ::= { MAYBE_RETURNS }
MAYBE_RETURNS ::= STATEMENTS return | return | STATEMENTS

COMMAND ::= LINE | BEND | BOX | CIRC
LINE    ::= line ( POINT , POINT )
BEND    ::= bend ( POINT , POINT , ANGLE )
BOX     ::= box ( POINT , POINT )
CIRC    ::= circ ( POINT , FLOAT | INT )

STRING ::= " CHARS "
CHARS  ::= CHARS CHAR | CHAR | ε

SCOPE ::= { STATEMENTS }

RANGE ::= EXPRESSION .. EXPRESSION

TYPE       ::= bool
         | u8 | u16 | u32 | u64 | u128
         | i8 | i16 | i32 | i64 | i128
         | f32 | f64
         | char
         | string
         | ARRAY_TYPE
         | IDENTIFIER
ARRAY_TYPE ::= TYPE []

ARRAY ::= [ ARRAY_ELEMENTS ]
ARRAY_ELEMENTS ::= EXPRESSION , ARRAY_ELEMENTS | EXPRESSION |  ε


FOR ::= for IDENTIFIER in EXPRESSION SCOPE

LOOP ::= loop SCOPE | loop RANGE SCOPE

ANGLE ::= FLOAT ° | INT °

CITY_ELEMENT      ::= BUILDING_TYPES IDENTIFIER { STATEMENTS BUILDING_ELEMENTS }
BUILDING_ELEMENTS ::=  COMMAND , BUILDING_ELEMENTS | COMMAND |  ε
BUILDING_TYPES    ::= road | building

STATEMENTS ::= STATEMENT STATEMENTS | STATEMENT | ε
STATEMENT  ::= EXPRESSION ; | FOR | FUNCTION | LOOP | ASSIGNMENT ; | COMMAND ;

CITY ::= city IDENTIFIER { CITY_ELEMENTS }
CITY_ELEMENTS ::=  MAP_ELEMENT , CITY_ELEMENTS | MAP_ELEMENT |  ε

FLOAT ::= INT . INT
CHAR ::= ^.$

ASSIGNMENT      ::= let VAR_DECLARATION | const VAR_DECLARATION
VAR_DECLARATION ::= IDENTIFIER : TYPE = EXPRESSION | IDENTIFIER = EXPRESSION

MAIN ::= fn main SCOPE

POINT           ::= ( POINT_COMPONENT , POINT_COMPONENT )
POINT_COMPONENT ::= FLOAT | INT

IF      ::= IF_EXPR | IF_EXPR ELSE
IF_EXPR ::= if EXPRESSION SCOPE | if EXPRESSION SCOPE ELSE_IF
ELSE    ::= else SCOPE
ELSE_IF ::= else IF_EXPR ELSE_IF | else IF_EXPR | ε
IDENTIFIER ::= LETTER ALPHA_NUMERIC_CHARACTERS
LETTER     ::= /[A-Za-z]/
CHARACTERS ::= /[A-Za-z0-9]*/
