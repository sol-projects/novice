INT = ^[+-]?\d+$

EXPRESSION ::= EXPRESSION + EXPRESSION_MULTIPLICATION | EXPRESSION - EXPRESSION_MULTIPLICATION | EXPRESSION_TERM
EXPRESSION_TERM ::= EXPRESSION_TERM * POWER | EXPRESSION_TERM / POWER | POWER
EXPRESSION_POWER ::= FACTOR ^ POWER | FACTOR
FACTOR ::= ( EXPRESSION ) | ASSIGNMENT
EXPRESSION_VALID ::= IF | INT | FLOAT | ASSIGNMENT

FUNCTION      ::= FUNCTION_HEAD FUNCTION_BODY
FUNCTION_HEAD ::= fn IDENTIFIER ( PARAMETERS ) : TYPE | fn IDENTIFIER ( PARAMETERS )
PARAMETERS    ::= PARAMETER , PARAMETERS | PARAMETER | ε
PARAMETER     ::= IDENTIFIER : TYPE
FUNCTION_BODY ::= { MAYBE_RETURNS }
MAYBE_RETURNS ::= STATEMENTS return | return | STATEMENTS

COMMAND = LINE | BEND | BOX | CIRC
LINE = line ( POINT , POINT )
BEND = bend ( POINT , POINT , ANGLE )
BOX = box ( POINT , POINT )
CIRC = circ ( POINT , FLOAT | INT )

STRING ::= " CHARS "
CHARS ::= CHARS CHAR | CHAR | ε

SCOPE ::= { STATEMENTS }

TYPE ::= bool
         | u8 | u16 | u32 | u64 | u128
         | i8 | i16 | i32 | i64 | i128
         | f32 | f64
         | char
         | string
         | ARRAY_TYPE
         | IDENTIFIER

ARRAY_TYPE = TYPE[]

ARRAY ::= [ ARRAY_ELEMENTS ]
ARRAY_ELEMENTS ::= EXPRESSION , ARRAY_ELEMENTS | EXPRESSION |  ε


FOR ::= for VARIABLE_NAME in ARRAY SCOPE

LOOP ::= loop SCOPE


ANGLE = FLOAT | INT °

STATEMENTS ::= STATEMENT STATEMENTS | STATEMENT | ε
STATEMENT ::= EXPRESSION ; | FOR | FUNCTION | LOOP | ASSIGNMENT ; | COMMAND ;
FLOAT = ^[+-]?\d+(\.\d+)?$
CHAR = ^.$

ASSIGNMENT ::= let VAR_DECLARATION | const VAR_DECLARATION
VAR_DECLARATION ::= IDENTIFIER : TYPE = EXPRESSION | IDENTIFIER = EXPRESSION

POINT = ( XY , XY )
PONT_COMPOUMENT = FLOAT | INT

IF      ::= IF_EXPR | IF_EXPR ELSE
IF_EXPR ::= if EXPRESSION SCOPE | if EXPRESSION SCOPE ELSE_IF
ELSE    ::= else SCOPE
ELSE_IF ::= else IF_EXPR ELSE_IF | else IF_EXPR | ε
IDENTIFIER ::= LETTER ALPHA_NUMERIC_CHARACTERS
LETTER ::= /[A-Za-z]/
ALPHA_NUMERIC_CHARACTERS ::= /[A-Za-z0-9]*/
